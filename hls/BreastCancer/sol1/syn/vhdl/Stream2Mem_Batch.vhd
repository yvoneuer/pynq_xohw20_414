-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Stream2Mem_Batch is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    memOutStrm_V_V_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    memOutStrm_V_V_empty_n : IN STD_LOGIC;
    memOutStrm_V_V_read : OUT STD_LOGIC;
    m_axi_in_V_AWVALID : OUT STD_LOGIC;
    m_axi_in_V_AWREADY : IN STD_LOGIC;
    m_axi_in_V_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_in_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_in_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_in_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_in_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_V_WVALID : OUT STD_LOGIC;
    m_axi_in_V_WREADY : IN STD_LOGIC;
    m_axi_in_V_WDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_in_V_WSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_in_V_WLAST : OUT STD_LOGIC;
    m_axi_in_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_V_ARVALID : OUT STD_LOGIC;
    m_axi_in_V_ARREADY : IN STD_LOGIC;
    m_axi_in_V_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_in_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_in_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_in_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_in_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_V_RVALID : IN STD_LOGIC;
    m_axi_in_V_RREADY : OUT STD_LOGIC;
    m_axi_in_V_RDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_in_V_RLAST : IN STD_LOGIC;
    m_axi_in_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_V_BVALID : IN STD_LOGIC;
    m_axi_in_V_BREADY : OUT STD_LOGIC;
    m_axi_in_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    out_V_offset_dout : IN STD_LOGIC_VECTOR (60 downto 0);
    out_V_offset_empty_n : IN STD_LOGIC;
    out_V_offset_read : OUT STD_LOGIC );
end;


architecture behav of Stream2Mem_Batch is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal out_V_offset_blk_n : STD_LOGIC;
    signal out_V_offset_read_reg_47 : STD_LOGIC_VECTOR (60 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal grp_Stream2Mem_fu_38_ap_start : STD_LOGIC;
    signal grp_Stream2Mem_fu_38_ap_done : STD_LOGIC;
    signal grp_Stream2Mem_fu_38_ap_idle : STD_LOGIC;
    signal grp_Stream2Mem_fu_38_ap_ready : STD_LOGIC;
    signal grp_Stream2Mem_fu_38_in_V_V_read : STD_LOGIC;
    signal grp_Stream2Mem_fu_38_m_axi_out_V_AWVALID : STD_LOGIC;
    signal grp_Stream2Mem_fu_38_m_axi_out_V_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_Stream2Mem_fu_38_m_axi_out_V_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Stream2Mem_fu_38_m_axi_out_V_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Stream2Mem_fu_38_m_axi_out_V_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Stream2Mem_fu_38_m_axi_out_V_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Stream2Mem_fu_38_m_axi_out_V_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Stream2Mem_fu_38_m_axi_out_V_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Stream2Mem_fu_38_m_axi_out_V_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Stream2Mem_fu_38_m_axi_out_V_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Stream2Mem_fu_38_m_axi_out_V_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Stream2Mem_fu_38_m_axi_out_V_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Stream2Mem_fu_38_m_axi_out_V_WVALID : STD_LOGIC;
    signal grp_Stream2Mem_fu_38_m_axi_out_V_WDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_Stream2Mem_fu_38_m_axi_out_V_WSTRB : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Stream2Mem_fu_38_m_axi_out_V_WLAST : STD_LOGIC;
    signal grp_Stream2Mem_fu_38_m_axi_out_V_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Stream2Mem_fu_38_m_axi_out_V_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Stream2Mem_fu_38_m_axi_out_V_ARVALID : STD_LOGIC;
    signal grp_Stream2Mem_fu_38_m_axi_out_V_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_Stream2Mem_fu_38_m_axi_out_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Stream2Mem_fu_38_m_axi_out_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Stream2Mem_fu_38_m_axi_out_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Stream2Mem_fu_38_m_axi_out_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Stream2Mem_fu_38_m_axi_out_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Stream2Mem_fu_38_m_axi_out_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Stream2Mem_fu_38_m_axi_out_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Stream2Mem_fu_38_m_axi_out_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Stream2Mem_fu_38_m_axi_out_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Stream2Mem_fu_38_m_axi_out_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Stream2Mem_fu_38_m_axi_out_V_RREADY : STD_LOGIC;
    signal grp_Stream2Mem_fu_38_m_axi_out_V_BREADY : STD_LOGIC;
    signal grp_Stream2Mem_fu_38_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);

    component Stream2Mem IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_V_V_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        in_V_V_empty_n : IN STD_LOGIC;
        in_V_V_read : OUT STD_LOGIC;
        m_axi_out_V_AWVALID : OUT STD_LOGIC;
        m_axi_out_V_AWREADY : IN STD_LOGIC;
        m_axi_out_V_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_out_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_out_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_out_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_out_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_out_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_out_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_out_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_out_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_out_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_out_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_out_V_WVALID : OUT STD_LOGIC;
        m_axi_out_V_WREADY : IN STD_LOGIC;
        m_axi_out_V_WDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_out_V_WSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_out_V_WLAST : OUT STD_LOGIC;
        m_axi_out_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_out_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_out_V_ARVALID : OUT STD_LOGIC;
        m_axi_out_V_ARREADY : IN STD_LOGIC;
        m_axi_out_V_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_out_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_out_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_out_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_out_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_out_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_out_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_out_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_out_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_out_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_out_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_out_V_RVALID : IN STD_LOGIC;
        m_axi_out_V_RREADY : OUT STD_LOGIC;
        m_axi_out_V_RDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_out_V_RLAST : IN STD_LOGIC;
        m_axi_out_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_out_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_out_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_out_V_BVALID : IN STD_LOGIC;
        m_axi_out_V_BREADY : OUT STD_LOGIC;
        m_axi_out_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_out_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_out_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        out_V_offset : IN STD_LOGIC_VECTOR (60 downto 0) );
    end component;



begin
    grp_Stream2Mem_fu_38 : component Stream2Mem
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Stream2Mem_fu_38_ap_start,
        ap_done => grp_Stream2Mem_fu_38_ap_done,
        ap_idle => grp_Stream2Mem_fu_38_ap_idle,
        ap_ready => grp_Stream2Mem_fu_38_ap_ready,
        in_V_V_dout => memOutStrm_V_V_dout,
        in_V_V_empty_n => memOutStrm_V_V_empty_n,
        in_V_V_read => grp_Stream2Mem_fu_38_in_V_V_read,
        m_axi_out_V_AWVALID => grp_Stream2Mem_fu_38_m_axi_out_V_AWVALID,
        m_axi_out_V_AWREADY => m_axi_in_V_AWREADY,
        m_axi_out_V_AWADDR => grp_Stream2Mem_fu_38_m_axi_out_V_AWADDR,
        m_axi_out_V_AWID => grp_Stream2Mem_fu_38_m_axi_out_V_AWID,
        m_axi_out_V_AWLEN => grp_Stream2Mem_fu_38_m_axi_out_V_AWLEN,
        m_axi_out_V_AWSIZE => grp_Stream2Mem_fu_38_m_axi_out_V_AWSIZE,
        m_axi_out_V_AWBURST => grp_Stream2Mem_fu_38_m_axi_out_V_AWBURST,
        m_axi_out_V_AWLOCK => grp_Stream2Mem_fu_38_m_axi_out_V_AWLOCK,
        m_axi_out_V_AWCACHE => grp_Stream2Mem_fu_38_m_axi_out_V_AWCACHE,
        m_axi_out_V_AWPROT => grp_Stream2Mem_fu_38_m_axi_out_V_AWPROT,
        m_axi_out_V_AWQOS => grp_Stream2Mem_fu_38_m_axi_out_V_AWQOS,
        m_axi_out_V_AWREGION => grp_Stream2Mem_fu_38_m_axi_out_V_AWREGION,
        m_axi_out_V_AWUSER => grp_Stream2Mem_fu_38_m_axi_out_V_AWUSER,
        m_axi_out_V_WVALID => grp_Stream2Mem_fu_38_m_axi_out_V_WVALID,
        m_axi_out_V_WREADY => m_axi_in_V_WREADY,
        m_axi_out_V_WDATA => grp_Stream2Mem_fu_38_m_axi_out_V_WDATA,
        m_axi_out_V_WSTRB => grp_Stream2Mem_fu_38_m_axi_out_V_WSTRB,
        m_axi_out_V_WLAST => grp_Stream2Mem_fu_38_m_axi_out_V_WLAST,
        m_axi_out_V_WID => grp_Stream2Mem_fu_38_m_axi_out_V_WID,
        m_axi_out_V_WUSER => grp_Stream2Mem_fu_38_m_axi_out_V_WUSER,
        m_axi_out_V_ARVALID => grp_Stream2Mem_fu_38_m_axi_out_V_ARVALID,
        m_axi_out_V_ARREADY => ap_const_logic_0,
        m_axi_out_V_ARADDR => grp_Stream2Mem_fu_38_m_axi_out_V_ARADDR,
        m_axi_out_V_ARID => grp_Stream2Mem_fu_38_m_axi_out_V_ARID,
        m_axi_out_V_ARLEN => grp_Stream2Mem_fu_38_m_axi_out_V_ARLEN,
        m_axi_out_V_ARSIZE => grp_Stream2Mem_fu_38_m_axi_out_V_ARSIZE,
        m_axi_out_V_ARBURST => grp_Stream2Mem_fu_38_m_axi_out_V_ARBURST,
        m_axi_out_V_ARLOCK => grp_Stream2Mem_fu_38_m_axi_out_V_ARLOCK,
        m_axi_out_V_ARCACHE => grp_Stream2Mem_fu_38_m_axi_out_V_ARCACHE,
        m_axi_out_V_ARPROT => grp_Stream2Mem_fu_38_m_axi_out_V_ARPROT,
        m_axi_out_V_ARQOS => grp_Stream2Mem_fu_38_m_axi_out_V_ARQOS,
        m_axi_out_V_ARREGION => grp_Stream2Mem_fu_38_m_axi_out_V_ARREGION,
        m_axi_out_V_ARUSER => grp_Stream2Mem_fu_38_m_axi_out_V_ARUSER,
        m_axi_out_V_RVALID => ap_const_logic_0,
        m_axi_out_V_RREADY => grp_Stream2Mem_fu_38_m_axi_out_V_RREADY,
        m_axi_out_V_RDATA => ap_const_lv64_0,
        m_axi_out_V_RLAST => ap_const_logic_0,
        m_axi_out_V_RID => ap_const_lv1_0,
        m_axi_out_V_RUSER => ap_const_lv1_0,
        m_axi_out_V_RRESP => ap_const_lv2_0,
        m_axi_out_V_BVALID => m_axi_in_V_BVALID,
        m_axi_out_V_BREADY => grp_Stream2Mem_fu_38_m_axi_out_V_BREADY,
        m_axi_out_V_BRESP => m_axi_in_V_BRESP,
        m_axi_out_V_BID => m_axi_in_V_BID,
        m_axi_out_V_BUSER => m_axi_in_V_BUSER,
        out_V_offset => out_V_offset_read_reg_47);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_Stream2Mem_fu_38_ap_done = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_Stream2Mem_fu_38_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Stream2Mem_fu_38_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_Stream2Mem_fu_38_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Stream2Mem_fu_38_ap_ready = ap_const_logic_1)) then 
                    grp_Stream2Mem_fu_38_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((out_V_offset_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                out_V_offset_read_reg_47 <= out_V_offset_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, out_V_offset_empty_n, grp_Stream2Mem_fu_38_ap_done, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((out_V_offset_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_Stream2Mem_fu_38_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, out_V_offset_empty_n)
    begin
                ap_block_state1 <= ((out_V_offset_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, grp_Stream2Mem_fu_38_ap_done, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_Stream2Mem_fu_38_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_Stream2Mem_fu_38_ap_done, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_Stream2Mem_fu_38_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_Stream2Mem_fu_38_ap_start <= grp_Stream2Mem_fu_38_ap_start_reg;
    m_axi_in_V_ARADDR <= ap_const_lv64_0;
    m_axi_in_V_ARBURST <= ap_const_lv2_0;
    m_axi_in_V_ARCACHE <= ap_const_lv4_0;
    m_axi_in_V_ARID <= ap_const_lv1_0;
    m_axi_in_V_ARLEN <= ap_const_lv32_0;
    m_axi_in_V_ARLOCK <= ap_const_lv2_0;
    m_axi_in_V_ARPROT <= ap_const_lv3_0;
    m_axi_in_V_ARQOS <= ap_const_lv4_0;
    m_axi_in_V_ARREGION <= ap_const_lv4_0;
    m_axi_in_V_ARSIZE <= ap_const_lv3_0;
    m_axi_in_V_ARUSER <= ap_const_lv1_0;
    m_axi_in_V_ARVALID <= ap_const_logic_0;
    m_axi_in_V_AWADDR <= grp_Stream2Mem_fu_38_m_axi_out_V_AWADDR;
    m_axi_in_V_AWBURST <= grp_Stream2Mem_fu_38_m_axi_out_V_AWBURST;
    m_axi_in_V_AWCACHE <= grp_Stream2Mem_fu_38_m_axi_out_V_AWCACHE;
    m_axi_in_V_AWID <= grp_Stream2Mem_fu_38_m_axi_out_V_AWID;
    m_axi_in_V_AWLEN <= grp_Stream2Mem_fu_38_m_axi_out_V_AWLEN;
    m_axi_in_V_AWLOCK <= grp_Stream2Mem_fu_38_m_axi_out_V_AWLOCK;
    m_axi_in_V_AWPROT <= grp_Stream2Mem_fu_38_m_axi_out_V_AWPROT;
    m_axi_in_V_AWQOS <= grp_Stream2Mem_fu_38_m_axi_out_V_AWQOS;
    m_axi_in_V_AWREGION <= grp_Stream2Mem_fu_38_m_axi_out_V_AWREGION;
    m_axi_in_V_AWSIZE <= grp_Stream2Mem_fu_38_m_axi_out_V_AWSIZE;
    m_axi_in_V_AWUSER <= grp_Stream2Mem_fu_38_m_axi_out_V_AWUSER;

    m_axi_in_V_AWVALID_assign_proc : process(grp_Stream2Mem_fu_38_m_axi_out_V_AWVALID, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_in_V_AWVALID <= grp_Stream2Mem_fu_38_m_axi_out_V_AWVALID;
        else 
            m_axi_in_V_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_in_V_BREADY_assign_proc : process(grp_Stream2Mem_fu_38_m_axi_out_V_BREADY, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_in_V_BREADY <= grp_Stream2Mem_fu_38_m_axi_out_V_BREADY;
        else 
            m_axi_in_V_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_in_V_RREADY <= ap_const_logic_0;
    m_axi_in_V_WDATA <= grp_Stream2Mem_fu_38_m_axi_out_V_WDATA;
    m_axi_in_V_WID <= grp_Stream2Mem_fu_38_m_axi_out_V_WID;
    m_axi_in_V_WLAST <= grp_Stream2Mem_fu_38_m_axi_out_V_WLAST;
    m_axi_in_V_WSTRB <= grp_Stream2Mem_fu_38_m_axi_out_V_WSTRB;
    m_axi_in_V_WUSER <= grp_Stream2Mem_fu_38_m_axi_out_V_WUSER;

    m_axi_in_V_WVALID_assign_proc : process(grp_Stream2Mem_fu_38_m_axi_out_V_WVALID, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_in_V_WVALID <= grp_Stream2Mem_fu_38_m_axi_out_V_WVALID;
        else 
            m_axi_in_V_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    memOutStrm_V_V_read_assign_proc : process(grp_Stream2Mem_fu_38_in_V_V_read, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            memOutStrm_V_V_read <= grp_Stream2Mem_fu_38_in_V_V_read;
        else 
            memOutStrm_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    out_V_offset_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, out_V_offset_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_V_offset_blk_n <= out_V_offset_empty_n;
        else 
            out_V_offset_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out_V_offset_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, out_V_offset_empty_n)
    begin
        if ((not(((out_V_offset_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_V_offset_read <= ap_const_logic_1;
        else 
            out_V_offset_read <= ap_const_logic_0;
        end if; 
    end process;

end behav;
