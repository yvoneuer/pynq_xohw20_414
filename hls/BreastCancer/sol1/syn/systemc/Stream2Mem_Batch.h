// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Stream2Mem_Batch_HH_
#define _Stream2Mem_Batch_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "Stream2Mem.h"

namespace ap_rtl {

struct Stream2Mem_Batch : public sc_module {
    // Port declarations 58
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<64> > memOutStrm_V_V_dout;
    sc_in< sc_logic > memOutStrm_V_V_empty_n;
    sc_out< sc_logic > memOutStrm_V_V_read;
    sc_out< sc_logic > m_axi_in_V_AWVALID;
    sc_in< sc_logic > m_axi_in_V_AWREADY;
    sc_out< sc_lv<64> > m_axi_in_V_AWADDR;
    sc_out< sc_lv<1> > m_axi_in_V_AWID;
    sc_out< sc_lv<32> > m_axi_in_V_AWLEN;
    sc_out< sc_lv<3> > m_axi_in_V_AWSIZE;
    sc_out< sc_lv<2> > m_axi_in_V_AWBURST;
    sc_out< sc_lv<2> > m_axi_in_V_AWLOCK;
    sc_out< sc_lv<4> > m_axi_in_V_AWCACHE;
    sc_out< sc_lv<3> > m_axi_in_V_AWPROT;
    sc_out< sc_lv<4> > m_axi_in_V_AWQOS;
    sc_out< sc_lv<4> > m_axi_in_V_AWREGION;
    sc_out< sc_lv<1> > m_axi_in_V_AWUSER;
    sc_out< sc_logic > m_axi_in_V_WVALID;
    sc_in< sc_logic > m_axi_in_V_WREADY;
    sc_out< sc_lv<64> > m_axi_in_V_WDATA;
    sc_out< sc_lv<8> > m_axi_in_V_WSTRB;
    sc_out< sc_logic > m_axi_in_V_WLAST;
    sc_out< sc_lv<1> > m_axi_in_V_WID;
    sc_out< sc_lv<1> > m_axi_in_V_WUSER;
    sc_out< sc_logic > m_axi_in_V_ARVALID;
    sc_in< sc_logic > m_axi_in_V_ARREADY;
    sc_out< sc_lv<64> > m_axi_in_V_ARADDR;
    sc_out< sc_lv<1> > m_axi_in_V_ARID;
    sc_out< sc_lv<32> > m_axi_in_V_ARLEN;
    sc_out< sc_lv<3> > m_axi_in_V_ARSIZE;
    sc_out< sc_lv<2> > m_axi_in_V_ARBURST;
    sc_out< sc_lv<2> > m_axi_in_V_ARLOCK;
    sc_out< sc_lv<4> > m_axi_in_V_ARCACHE;
    sc_out< sc_lv<3> > m_axi_in_V_ARPROT;
    sc_out< sc_lv<4> > m_axi_in_V_ARQOS;
    sc_out< sc_lv<4> > m_axi_in_V_ARREGION;
    sc_out< sc_lv<1> > m_axi_in_V_ARUSER;
    sc_in< sc_logic > m_axi_in_V_RVALID;
    sc_out< sc_logic > m_axi_in_V_RREADY;
    sc_in< sc_lv<64> > m_axi_in_V_RDATA;
    sc_in< sc_logic > m_axi_in_V_RLAST;
    sc_in< sc_lv<1> > m_axi_in_V_RID;
    sc_in< sc_lv<1> > m_axi_in_V_RUSER;
    sc_in< sc_lv<2> > m_axi_in_V_RRESP;
    sc_in< sc_logic > m_axi_in_V_BVALID;
    sc_out< sc_logic > m_axi_in_V_BREADY;
    sc_in< sc_lv<2> > m_axi_in_V_BRESP;
    sc_in< sc_lv<1> > m_axi_in_V_BID;
    sc_in< sc_lv<1> > m_axi_in_V_BUSER;
    sc_in< sc_lv<61> > out_V_offset_dout;
    sc_in< sc_logic > out_V_offset_empty_n;
    sc_out< sc_logic > out_V_offset_read;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_lv<64> > ap_var_for_const1;
    sc_signal< sc_lv<1> > ap_var_for_const2;
    sc_signal< sc_lv<2> > ap_var_for_const3;


    // Module declarations
    Stream2Mem_Batch(sc_module_name name);
    SC_HAS_PROCESS(Stream2Mem_Batch);

    ~Stream2Mem_Batch();

    sc_trace_file* mVcdFile;

    Stream2Mem* grp_Stream2Mem_fu_38;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > out_V_offset_blk_n;
    sc_signal< sc_lv<61> > out_V_offset_read_reg_47;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_logic > grp_Stream2Mem_fu_38_ap_start;
    sc_signal< sc_logic > grp_Stream2Mem_fu_38_ap_done;
    sc_signal< sc_logic > grp_Stream2Mem_fu_38_ap_idle;
    sc_signal< sc_logic > grp_Stream2Mem_fu_38_ap_ready;
    sc_signal< sc_logic > grp_Stream2Mem_fu_38_in_V_V_read;
    sc_signal< sc_logic > grp_Stream2Mem_fu_38_m_axi_out_V_AWVALID;
    sc_signal< sc_lv<64> > grp_Stream2Mem_fu_38_m_axi_out_V_AWADDR;
    sc_signal< sc_lv<1> > grp_Stream2Mem_fu_38_m_axi_out_V_AWID;
    sc_signal< sc_lv<32> > grp_Stream2Mem_fu_38_m_axi_out_V_AWLEN;
    sc_signal< sc_lv<3> > grp_Stream2Mem_fu_38_m_axi_out_V_AWSIZE;
    sc_signal< sc_lv<2> > grp_Stream2Mem_fu_38_m_axi_out_V_AWBURST;
    sc_signal< sc_lv<2> > grp_Stream2Mem_fu_38_m_axi_out_V_AWLOCK;
    sc_signal< sc_lv<4> > grp_Stream2Mem_fu_38_m_axi_out_V_AWCACHE;
    sc_signal< sc_lv<3> > grp_Stream2Mem_fu_38_m_axi_out_V_AWPROT;
    sc_signal< sc_lv<4> > grp_Stream2Mem_fu_38_m_axi_out_V_AWQOS;
    sc_signal< sc_lv<4> > grp_Stream2Mem_fu_38_m_axi_out_V_AWREGION;
    sc_signal< sc_lv<1> > grp_Stream2Mem_fu_38_m_axi_out_V_AWUSER;
    sc_signal< sc_logic > grp_Stream2Mem_fu_38_m_axi_out_V_WVALID;
    sc_signal< sc_lv<64> > grp_Stream2Mem_fu_38_m_axi_out_V_WDATA;
    sc_signal< sc_lv<8> > grp_Stream2Mem_fu_38_m_axi_out_V_WSTRB;
    sc_signal< sc_logic > grp_Stream2Mem_fu_38_m_axi_out_V_WLAST;
    sc_signal< sc_lv<1> > grp_Stream2Mem_fu_38_m_axi_out_V_WID;
    sc_signal< sc_lv<1> > grp_Stream2Mem_fu_38_m_axi_out_V_WUSER;
    sc_signal< sc_logic > grp_Stream2Mem_fu_38_m_axi_out_V_ARVALID;
    sc_signal< sc_lv<64> > grp_Stream2Mem_fu_38_m_axi_out_V_ARADDR;
    sc_signal< sc_lv<1> > grp_Stream2Mem_fu_38_m_axi_out_V_ARID;
    sc_signal< sc_lv<32> > grp_Stream2Mem_fu_38_m_axi_out_V_ARLEN;
    sc_signal< sc_lv<3> > grp_Stream2Mem_fu_38_m_axi_out_V_ARSIZE;
    sc_signal< sc_lv<2> > grp_Stream2Mem_fu_38_m_axi_out_V_ARBURST;
    sc_signal< sc_lv<2> > grp_Stream2Mem_fu_38_m_axi_out_V_ARLOCK;
    sc_signal< sc_lv<4> > grp_Stream2Mem_fu_38_m_axi_out_V_ARCACHE;
    sc_signal< sc_lv<3> > grp_Stream2Mem_fu_38_m_axi_out_V_ARPROT;
    sc_signal< sc_lv<4> > grp_Stream2Mem_fu_38_m_axi_out_V_ARQOS;
    sc_signal< sc_lv<4> > grp_Stream2Mem_fu_38_m_axi_out_V_ARREGION;
    sc_signal< sc_lv<1> > grp_Stream2Mem_fu_38_m_axi_out_V_ARUSER;
    sc_signal< sc_logic > grp_Stream2Mem_fu_38_m_axi_out_V_RREADY;
    sc_signal< sc_logic > grp_Stream2Mem_fu_38_m_axi_out_V_BREADY;
    sc_signal< sc_logic > grp_Stream2Mem_fu_38_ap_start_reg;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_state2;
    static const sc_lv<3> ap_ST_fsm_state3;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const2();
    void thread_ap_var_for_const3();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_block_state1();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_grp_Stream2Mem_fu_38_ap_start();
    void thread_m_axi_in_V_ARADDR();
    void thread_m_axi_in_V_ARBURST();
    void thread_m_axi_in_V_ARCACHE();
    void thread_m_axi_in_V_ARID();
    void thread_m_axi_in_V_ARLEN();
    void thread_m_axi_in_V_ARLOCK();
    void thread_m_axi_in_V_ARPROT();
    void thread_m_axi_in_V_ARQOS();
    void thread_m_axi_in_V_ARREGION();
    void thread_m_axi_in_V_ARSIZE();
    void thread_m_axi_in_V_ARUSER();
    void thread_m_axi_in_V_ARVALID();
    void thread_m_axi_in_V_AWADDR();
    void thread_m_axi_in_V_AWBURST();
    void thread_m_axi_in_V_AWCACHE();
    void thread_m_axi_in_V_AWID();
    void thread_m_axi_in_V_AWLEN();
    void thread_m_axi_in_V_AWLOCK();
    void thread_m_axi_in_V_AWPROT();
    void thread_m_axi_in_V_AWQOS();
    void thread_m_axi_in_V_AWREGION();
    void thread_m_axi_in_V_AWSIZE();
    void thread_m_axi_in_V_AWUSER();
    void thread_m_axi_in_V_AWVALID();
    void thread_m_axi_in_V_BREADY();
    void thread_m_axi_in_V_RREADY();
    void thread_m_axi_in_V_WDATA();
    void thread_m_axi_in_V_WID();
    void thread_m_axi_in_V_WLAST();
    void thread_m_axi_in_V_WSTRB();
    void thread_m_axi_in_V_WUSER();
    void thread_m_axi_in_V_WVALID();
    void thread_memOutStrm_V_V_read();
    void thread_out_V_offset_blk_n();
    void thread_out_V_offset_read();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
