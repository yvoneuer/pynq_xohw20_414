// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Resid_StreamingDataW_7_HH_
#define _Resid_StreamingDataW_7_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct Resid_StreamingDataW_7 : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<256> > in_V_V_dout;
    sc_in< sc_logic > in_V_V_empty_n;
    sc_out< sc_logic > in_V_V_read;
    sc_out< sc_lv<32> > out_V_V_din;
    sc_in< sc_logic > out_V_V_full_n;
    sc_out< sc_logic > out_V_V_write;


    // Module declarations
    Resid_StreamingDataW_7(sc_module_name name);
    SC_HAS_PROCESS(Resid_StreamingDataW_7);

    ~Resid_StreamingDataW_7();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > in_V_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage1;
    sc_signal< sc_lv<1> > exitcond_reg_210;
    sc_signal< sc_lv<1> > tmp_reg_219;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_logic > out_V_V_blk_n;
    sc_signal< sc_lv<1> > exitcond_reg_210_pp0_iter1_reg;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<32> > o_reg_69;
    sc_signal< sc_lv<7> > t_reg_80;
    sc_signal< sc_lv<1> > exitcond_fu_109_p2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_predicate_op29_read_state4;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<7> > t_4_fu_115_p2;
    sc_signal< sc_lv<7> > t_4_reg_214;
    sc_signal< sc_lv<1> > tmp_fu_121_p2;
    sc_signal< sc_lv<32> > o_2_fu_127_p2;
    sc_signal< sc_lv<32> > o_2_reg_223;
    sc_signal< sc_lv<256> > tmp_V_61_reg_229;
    sc_signal< bool > ap_predicate_op21_read_state3;
    sc_signal< bool > ap_block_state3_pp0_stage1_iter0;
    sc_signal< bool > ap_block_state5_pp0_stage1_iter1;
    sc_signal< bool > ap_block_pp0_stage1_11001;
    sc_signal< sc_lv<32> > p_s_fu_138_p3;
    sc_signal< sc_lv<32> > p_s_reg_234;
    sc_signal< sc_lv<256> > ei_V_1_cast_fu_151_p1;
    sc_signal< sc_lv<256> > ei_V_0_cast_fu_155_p1;
    sc_signal< sc_lv<32> > tmp_V_60_fu_174_p1;
    sc_signal< sc_lv<32> > tmp_V_60_reg_254;
    sc_signal< bool > ap_block_state1;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< bool > ap_block_pp0_stage1_subdone;
    sc_signal< sc_lv<32> > ap_phi_mux_o_phi_fu_73_p4;
    sc_signal< sc_lv<7> > ap_phi_mux_t_phi_fu_84_p4;
    sc_signal< sc_lv<256> > ap_phi_reg_pp0_iter0_ei_V_1_1_reg_91;
    sc_signal< sc_lv<256> > ap_phi_reg_pp0_iter1_ei_V_1_1_reg_91;
    sc_signal< sc_lv<256> > ap_phi_reg_pp0_iter0_ei_V_0_1_reg_100;
    sc_signal< sc_lv<256> > ap_phi_reg_pp0_iter1_ei_V_0_1_reg_100;
    sc_signal< sc_lv<32> > tmp_V_fu_159_p1;
    sc_signal< bool > ap_block_pp0_stage1_01001;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<224> > ei_V_fu_48;
    sc_signal< sc_lv<224> > ei_V_1_fu_52;
    sc_signal< sc_lv<1> > tmp_s_fu_133_p2;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< bool > ap_condition_193;
    sc_signal< bool > ap_condition_198;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_pp0_stage0;
    static const sc_lv<4> ap_ST_fsm_pp0_stage1;
    static const sc_lv<4> ap_ST_fsm_state7;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<7> ap_const_lv7_48;
    static const sc_lv<7> ap_const_lv7_1;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_20;
    static const sc_lv<32> ap_const_lv32_FF;
    static const sc_lv<32> ap_const_lv32_3;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp0_stage1();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state7();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp0_stage1();
    void thread_ap_block_pp0_stage1_01001();
    void thread_ap_block_pp0_stage1_11001();
    void thread_ap_block_pp0_stage1_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage1_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_block_state5_pp0_stage1_iter1();
    void thread_ap_block_state6_pp0_stage0_iter2();
    void thread_ap_condition_193();
    void thread_ap_condition_198();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_o_phi_fu_73_p4();
    void thread_ap_phi_mux_t_phi_fu_84_p4();
    void thread_ap_phi_reg_pp0_iter0_ei_V_0_1_reg_100();
    void thread_ap_phi_reg_pp0_iter0_ei_V_1_1_reg_91();
    void thread_ap_predicate_op21_read_state3();
    void thread_ap_predicate_op29_read_state4();
    void thread_ap_ready();
    void thread_ei_V_0_cast_fu_155_p1();
    void thread_ei_V_1_cast_fu_151_p1();
    void thread_exitcond_fu_109_p2();
    void thread_in_V_V_blk_n();
    void thread_in_V_V_read();
    void thread_o_2_fu_127_p2();
    void thread_out_V_V_blk_n();
    void thread_out_V_V_din();
    void thread_out_V_V_write();
    void thread_p_s_fu_138_p3();
    void thread_t_4_fu_115_p2();
    void thread_tmp_V_60_fu_174_p1();
    void thread_tmp_V_fu_159_p1();
    void thread_tmp_fu_121_p2();
    void thread_tmp_s_fu_133_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
